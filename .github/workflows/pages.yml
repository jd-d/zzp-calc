name: Pages (prod + previews)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: pages
  cancel-in-progress: true

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare site content
        run: |
          rm -rf dist
          mkdir -p dist
          cp index.html dist/
          cp 404.html dist/
          cp .nojekyll dist/
          cp -R assets dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: site-dist
          path: dist

  deploy_prod:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Publish prod to gh-pages root
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: dist
          keep_files: true

  deploy_preview:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: pr
        run: echo "dir=previews/pr-${{ github.event.number }}" >> "$GITHUB_OUTPUT"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site-dist
          path: dist

      - name: Publish PR preview to subfolder
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: dist
          keep_files: true
          destination_dir: ${{ steps.pr.outputs.dir }}

      - name: Comment preview status on PR
        id: preview_comment
        uses: actions/github-script@v7
        with:
          script: |
            const dir = process.env.DIR;
            const base = `https://${context.repo.owner}.github.io/${context.repo.repo}`;
            const url = `${base}/${dir}/`;
            const { data } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `\u23F3 Preview is being prepared. I'll update this comment with the link once it's ready.`
            });
            return { commentId: data.id, url };
        env:
          DIR: ${{ steps.pr.outputs.dir }}

      - name: Wait for preview deployment
        id: wait_for_preview
        uses: actions/github-script@v7
        env:
          PREVIEW_INFO: ${{ steps.preview_comment.outputs.result }}
          DELAY_MS: 3000
          MAX_ATTEMPTS: 20
        with:
          script: |
            const { commentId, url } = JSON.parse(process.env.PREVIEW_INFO);
            const maxAttempts = Number(process.env.MAX_ATTEMPTS) || 20;
            const delayMs = Number(process.env.DELAY_MS) || 3000;

            const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

            for (let attempt = 1; attempt <= maxAttempts; attempt++) {
              try {
                const checkUrl = `${url}?nocache=${Date.now()}`;
                const response = await fetch(checkUrl, { method: 'GET', redirect: 'follow' });
                if (response.ok) {
                  core.info(`Preview became available after ${attempt} attempt(s).`);
                  return { commentId, url, ready: true, attempts: attempt };
                }
                core.info(`Attempt ${attempt}: received status ${response.status}.`);
              } catch (error) {
                core.info(`Attempt ${attempt}: encountered error ${error}.`);
              }

              if (attempt < maxAttempts) {
                await sleep(delayMs);
              }
            }

            core.warning(`Preview was not ready after ${maxAttempts} attempt(s).`);
            return { commentId, url, ready: false, attempts: maxAttempts };

      - name: Update preview comment with final status
        if: always()
        uses: actions/github-script@v7
        env:
          PREVIEW_RESULT: ${{ steps.wait_for_preview.outputs.result }}
        with:
          script: |
            const { commentId, url, ready } = JSON.parse(process.env.PREVIEW_RESULT);
            const body = ready
              ? `\uD83D\uDD0D Preview ready: [View preview](${url})`
              : `\u26A0\uFE0F Preview is still preparing. You can check back soon: [View preview](${url})`;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body
            });
